import logging
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, Application, CallbackContext
import aiohttp
import os

# Enable logging for debugging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Path to the BIN database file
BIN_FILE_PATH = '/root/ccbot/bins.txt'

# Function to handle the /start command
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        'Welcome! Choose one of the following options:\n'
        '1. CVV\n'
        '2. Check\n'
        '3. Balance\n'
        '4. Contact\n'
        'Type the option name to proceed.'
    )

# Function to handle user commands
async def handle_user_input(update: Update, context: CallbackContext) -> None:
    text = update.message.text.lower()
    
    if text == 'cvv':
        await update.message.reply_text('Send BIN to check availability:')
        context.user_data['path'] = 'cvv'
    elif text == 'check':
        await update.message.reply_text('Choose:\n1. Auth\n2. Charged')
        context.user_data['path'] = 'check'
    elif text == 'balance':
        await update.message.reply_text('Fetching your balance...')
        # Simulate balance details
        await update.message.reply_text(
            'Your balance is 100 credits.\n'
            'User ID: 1234\n'
            'Name: John Doe\n'
            'Exp: 12/24\n'
            'To buy credits, DM @DEFULTERX2'
        )
        context.user_data['path'] = 'balance'
    elif text == 'contact':
        await update.message.reply_text('For credits or enquiries, DM @DEFULTERX2.')
        context.user_data['path'] = 'contact'
    else:
        await update.message.reply_text('Invalid option. Please type CVV, Check, Balance, or Contact.')

# Function to check BIN availability in CVV path
async def check_cvv(update: Update, context: CallbackContext) -> None:
    if 'path' in context.user_data and context.user_data['path'] == 'cvv':
        bin_number = update.message.text.strip()
        if len(bin_number) != 6 or not bin_number.isdigit():
            await update.message.reply_text('Please provide a valid 6-digit BIN.')
            return

        if not os.path.exists(BIN_FILE_PATH):
            await update.message.reply_text('BIN database file not found. Please upload a BIN file.')
            return

        with open(BIN_FILE_PATH, 'r') as file:
            bins = file.read().splitlines()
            if bin_number in bins:
                await update.message.reply_text(f"BIN {bin_number} is available. Price: $10")
            else:
                await update.message.reply_text(f"BIN {bin_number} is not available.")
    else:
        await update.message.reply_text('Invalid input. Please select "CVV" first.')

# Function to handle Check path (Auth/Charged)
async def handle_check(update: Update, context: CallbackContext) -> None:
    if 'path' in context.user_data and context.user_data['path'] == 'check':
        choice = update.message.text.lower()
        if choice in ['auth', 'charged']:
            await update.message.reply_text(f'{choice.capitalize()} is currently under maintenance. Please try later.')
        else:
            await update.message.reply_text('Invalid choice. Please type Auth or Charged.')
    else:
        await update.message.reply_text('Invalid input. Please select "Check" first.')

# Function to handle BIN database upload by admin
async def upload_file(update: Update, context: CallbackContext) -> None:
    if update.message.document:
        file = await update.message.document.get_file()
        await file.download_to_drive(BIN_FILE_PATH)
        await update.message.reply_text(f'BIN file uploaded successfully to {BIN_FILE_PATH}.')
    else:
        await update.message.reply_text('Please upload a valid file.')

# Main function to set up the bot
def main():
    TOKEN = '7727404520:AAEFyJk0k2ycFHKLlWAb3Lh37hiVIxyuqkQ'  # Replace this with your bot token

    # Create the Application instance
    application = Application.builder().token(TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler('start', start))

    # Add message handlers
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))
    application.add_handler(MessageHandler(filters.Regex(r'^\d{6}$'), check_cvv))
    application.add_handler(MessageHandler(filters.Document.ALL, upload_file))

    # Start polling for messages
    application.run_polling()

if __name__ == '__main__':
    main()
